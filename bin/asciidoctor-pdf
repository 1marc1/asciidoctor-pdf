#!/usr/bin/env ruby

attributes = %w(idprefix=@ listing-caption=Listing@ buildfor-editor)
while ARGV[0] == '-a'
  ARGV.shift
  attributes << ARGV.shift
end

theme_file = if ARGV[0] == '--theme'
  ARGV.shift
  ARGV.shift
end

asciidoc_file = ARGV[0] || %(README.adoc)
unless (File.exist? asciidoc_file) && (File.readable? asciidoc_file)
  warn %(ERROR: The specified file does not exist or cannot be read: #{asciidoc_file})
  exit 1
end

$:.unshift File.join File.dirname(__FILE__), '..', 'lib'

require 'ostruct'
require 'asciidoctor'
require 'asciidoctor/pdf_renderer'
require 'asciidoctor/theme_loader'
require 'asciidoctor-pdf/implicit_header_processor'
require 'tilt'
require 'slim'

DataDir = File.join File.dirname(__FILE__), '..', 'data'
ThemesDir = File.join DataDir, 'themes'
TemplatesDir = File.join DataDir, 'templates'

#theme_data = Asciidoctor::ThemeLoader.load_file File.join ThemesDir, 'default-theme.yml'
#theme_data = Asciidoctor::ThemeLoader.load_file File.join ThemesDir, 'asciidoctor-theme.yml'
theme_data = Asciidoctor::ThemeLoader.load_file(theme_file || (File.join ThemesDir, 'default-theme.yml'))

file_rootname = Asciidoctor::Helpers.rootname File.basename asciidoc_file
pdf_file = %(#{file_rootname}.pdf)
options = {
  safe: :safe,
  template_dir: TemplatesDir,
  header_footer: true,
  attributes: attributes
}

options[:extensions_registry] = Asciidoctor::Extensions.build_registry :pdf do
  include_processor Asciidoctor::Pdf::ImplicitHeaderProcessor.new @document
end

workdir, asciidoc_file = File.split asciidoc_file
Dir.chdir workdir

doc = Asciidoctor.load_file asciidoc_file, options
Asciidoctor::PdfRenderer.render doc, pdf_file, theme_data
